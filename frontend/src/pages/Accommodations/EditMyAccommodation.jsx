import React, { useEffect, useState } from 'react';
import { useNavigate, useParams } from 'react-router-dom';
import Notification from '../../components/Notification';
import {
  getAccommodationById,
  updateMyAccommodation
} from '../../api/accommodations/accommodationService';

import { MapContainer, TileLayer, Marker, useMapEvents } from 'react-leaflet';
import L from 'leaflet';
import setupLeaflet from '../../utils/leafletConfig';
import 'leaflet/dist/leaflet.css';

setupLeaflet();

const defaultIcon = new L.Icon({
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
  iconSize: [25, 41],
  iconAnchor: [12, 41],
});

// –ö–ª—ñ–∫ –ø–æ –∫–∞—Ä—Ç—ñ -> –∑–∞–¥–∞—î–º–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏
const LocationPicker = ({ setCoordinates }) => {
  useMapEvents({
    click(e) {
      setCoordinates({
        latitude: e.latlng.lat.toFixed(6),
        longitude: e.latlng.lng.toFixed(6),
      });
    },
  });
  return null;
};

//  —Ö–µ–ª–ø–µ—Ä–∏ –∞–¥—Ä–µ—Å–∏ (–æ–±–ª–∞—Å—Ç—å/–º—ñ—Å—Ç–æ/–≤—É–ª–∏—Ü—è) 

const stripRegionFromLocation = (loc = '') => {
  if (!loc) return { region: '', rest: '' };
  let s = loc.trim();

  const re = /^(.+?(?:–æ–±–ª–∞—Å—Ç—å|–æ–±–ª\.))\s*,\s*/i;
  const m = s.match(re);
  if (m) {
    const regionRaw = m[1].trim();
    const regionNorm = regionRaw.replace(/–æ–±–ª\./i, '–æ–±–ª–∞—Å—Ç—å');
    s = s.replace(re, '').trim();
    return { region: regionNorm, rest: s };
  }
  return { region: '', rest: s };
};

const stripCityFromLocation = (loc = '', city = '') => {
  const c = (city || '').trim();
  if (!loc) return '';
  let s = loc.trim();
  if (!c) return s;

  const patterns = [
    new RegExp(`^–º\\.?\\s*${c}\\s*,\\s*`, 'i'),
    new RegExp(`^–º—ñ—Å—Ç–æ\\s*${c}\\s*,\\s*`, 'i'),
    new RegExp(`^${c}\\s*,\\s*`, 'i'),
  ];
  patterns.forEach((re) => (s = s.replace(re, '')));
  return s.trim();
};

const hasStreetPrefix = (s = '') =>
  /(–≤—É–ª\.|–≤—É–ª–∏—Ü—è|–ø—Ä–æ—Å–ø\.|–ø—Ä–æ—Å–ø–µ–∫—Ç|–±—É–ª—å–≤–∞—Ä|–ø—Ä–æ–≤\.|–ø—Ä–æ–≤—É–ª–æ–∫|street|str\.)/i.test(s);

const normalizeRegion = (r = '') => {
  const s = r.trim();
  if (!s) return '';
  if (/–æ–±–ª–∞—Å—Ç—å$/i.test(s)) return s;
  if (/–æ–±–ª\.$/i.test(s)) return s.replace(/–æ–±–ª\.$/i, '–æ–±–ª–∞—Å—Ç—å');
  return `${s} –æ–±–ª–∞—Å—Ç—å`;
};

const buildLocation = ({ region, city, street }) => {
  const regionPart = normalizeRegion(region || '');
  const cityPart = city?.trim() ? `–º. ${city.trim()}` : '';

  let streetPart = (street || '').trim();
  if (streetPart && !hasStreetPrefix(streetPart)) streetPart = `–≤—É–ª. ${streetPart}`;

  return [regionPart, cityPart, streetPart]
    .filter(Boolean)
    .join(', ')
    .replace(/\s+,/g, ',')
    .replace(/,\s*,/g, ', ')
    .trim();
};

const normalizeStreetOnly = (raw, city, region) => {
  let s = (raw || '').trim();
  const afterRegion = stripRegionFromLocation(s).rest;
  const afterCity = stripCityFromLocation(afterRegion, city);
  if (afterCity && !hasStreetPrefix(afterCity)) return `–≤—É–ª. ${afterCity}`;
  return afterCity;
};

const EditMyAccommodation = () => {
  const { id } = useParams();
  const navigate = useNavigate();

  const [formData, setFormData] = useState(null);
  const [error, setError] = useState(null);
  const [loading, setLoading] = useState(false);

  // –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è + –ø–∞—Ä—Å–∏–Ω–≥ –æ–±–ª–∞—Å—Ç—ñ —Ç–∞ –≤—É–ª–∏—Ü—ñ
  useEffect(() => {
    getAccommodationById(id)
      .then((data) => {
        const { region, rest } = stripRegionFromLocation(data.location || '');
        const streetOnly = normalizeStreetOnly(rest, data.city || '', region || '');
        setFormData({
          ...data,
          region: region || '',
          location: streetOnly || '',
        });
      })
      .catch(() => setError('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–æ–º–µ—à–∫–∞–Ω–Ω—è'));
  }, [id]);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  const setCoordinates = ({ latitude, longitude }) => {
    setFormData((prev) => ({ ...prev, latitude, longitude }));
  };

  const normalizeFormAddress = () =>
    setFormData((prev) => ({
      ...prev,
      region: normalizeRegion(prev.region || ''),
      location: normalizeStreetOnly(prev.location || '', prev.city || '', prev.region || ''),
    }));

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);

    try {
      // –ø—Ä–æ—Å—Ç–∞ —Ñ—Ä–æ–Ω—Ç-–≤–∞–ª—ñ–¥—Ü–∞—Ü—ñ—è dailyRate (>0)
      const rate =
        formData.dailyRate === '' || formData.dailyRate == null
          ? undefined
          : Number(formData.dailyRate);

      if (rate === undefined || Number.isNaN(rate) || rate <= 0) {
        setError('–¶—ñ–Ω–∞ –∑–∞ –¥–æ–±—É –º–∞—î –±—É—Ç–∏ –±—ñ–ª—å—à–æ—é –∑–∞ 0');
        setLoading(false);
        return;
      }

      const locationFull = buildLocation({
        region: formData.region,
        city: formData.city,
        street: formData.location,
      });

      // –≥–∞—Ä–∞–Ω—Ç—É—î–º–æ –º–∞—Å–∏–≤ —Ä—è–¥–∫—ñ–≤ –¥–ª—è amenities
      const amenities = Array.isArray(formData.amenities)
        ? formData.amenities
        : String(formData.amenities || '')
            .split(',')
            .map((a) => a.trim())
            .filter(Boolean);

      const payload = {
        name: (formData.name || '').trim(),
        type: formData.type,
        location: locationFull,
        city: (formData.city || '').trim(),
        latitude: String(formData.latitude || ''), 
        longitude: String(formData.longitude || ''),
        size: (formData.size || '‚Äî').trim(),       
        amenities,
        dailyRate: rate,                           
        image: (formData.image || '').trim(),
      };

      await updateMyAccommodation(id, payload); 
      navigate('/my-accommodations');
    } catch (err) {
      setError(err.response?.data?.message || '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ');
    } finally {
      setLoading(false);
    }
  };

  if (!formData) return <p>–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...</p>;

  const lat = Number(formData.latitude);
  const lng = Number(formData.longitude);
  const hasPoint = Number.isFinite(lat) && Number.isFinite(lng);

  return (
    <div className="container page">
      <form onSubmit={handleSubmit} className="admin-form">
        <h1>‚ú® ‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –º–æ—î –ø–æ–º–µ—à–∫–∞–Ω–Ω—è</h1>
        {error && <Notification message={error} type="danger" />}

        {/* –ù–∞–∑–≤–∞ */}
        <div className="form-group">
          <label>–ù–∞–∑–≤–∞</label>
          <input
            type="text"
            name="name"
            value={formData.name || ''}
            onChange={handleChange}
          />
        </div>

        {/* –¢–∏–ø */}
        <div className="form-group">
          <label>–¢–∏–ø</label>
          <select name="type" value={formData.type || 'HOUSE'} onChange={handleChange}>
            <option value="HOUSE">–ë—É–¥–∏–Ω–æ–∫</option>
            <option value="APARTMENT">–ö–≤–∞—Ä—Ç–∏—Ä–∞</option>
            <option value="HOTEL">–ì–æ—Ç–µ–ª—å</option>
            <option value="VACATION_HOME">–î—ñ–º –¥–ª—è –≤—ñ–¥–ø–æ—á–∏–Ω–∫—É</option>
            <option value="HOSTEL">–•–æ—Å—Ç–µ–ª</option>
          </select>
        </div>

        {/* –û–±–ª–∞—Å—Ç—å */}
        <div className="form-group">
          <label>–û–±–ª–∞—Å—Ç—å</label>
          <input
            type="text"
            name="region"
            placeholder="–Ü–≤–∞–Ω–æ-–§—Ä–∞–Ω–∫—ñ–≤—Å—å–∫–∞ –æ–±–ª–∞—Å—Ç—å"
            value={formData.region || ''}
            onChange={handleChange}
            onBlur={normalizeFormAddress}
          />
        </div>

        {/* –ú—ñ—Å—Ç–æ */}
        <div className="form-group">
          <label>–ú—ñ—Å—Ç–æ</label>
          <input
            type="text"
            name="city"
            placeholder="–ö–∏—ó–≤"
            value={formData.city || ''}
            onChange={handleChange}
            onBlur={normalizeFormAddress}
          />
        </div>

        {/* –õ–æ–∫–∞—Ü—ñ—è (–≤—É–ª–∏—Ü—è/–±—É–¥–∏–Ω–æ–∫/–∫–≤.) */}
        <div className="form-group">
          <label>–õ–æ–∫–∞—Ü—ñ—è</label>
          <input
            type="text"
            name="location"
            placeholder="–≤—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞, 15, –∫–≤. 3"
            value={formData.location || ''}
            onChange={handleChange}
            onBlur={normalizeFormAddress}
          />
        </div>

        {/* –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–∞–ª–µ–Ω—å / —Ä–æ–∑–º—ñ—Ä */}
        <div className="form-group">
          <label>–ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å–ø–∞–ª–µ–Ω (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 1)</label>
          <input
            type="text"
            name="size"
            value={formData.size || ''}
            onChange={handleChange}
          />
        </div>

        {/* –ö–∞—Ä—Ç–∞ */}
        <div className="form-group">
          <label>–í–∏–±–µ—Ä—ñ—Ç—å —Ä–æ–∑—Ç–∞—à—É–≤–∞–Ω–Ω—è –Ω–∞ –∫–∞—Ä—Ç—ñ</label>
          <div style={{ height: '300px', width: '100%', marginBottom: '1rem' }}>
            <MapContainer
              center={[hasPoint ? lat : 50.45, hasPoint ? lng : 30.52]}
              zoom={12}
              style={{ height: '100%', width: '100%' }}
            >
              <TileLayer
                url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                attribution="&copy; OpenStreetMap contributors"
              />
              <LocationPicker setCoordinates={setCoordinates} />
              {hasPoint && <Marker position={[lat, lng]} icon={defaultIcon} />}
            </MapContainer>
          </div>
          {hasPoint && <p>üìç –û–±—Ä–∞–Ω—ñ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {lat}, {lng}</p>}
        </div>

        {/* –ó—Ä—É—á–Ω–æ—Å—Ç—ñ */}
        <div className="form-group">
          <label>–ó—Ä—É—á–Ω–æ—Å—Ç—ñ (—á–µ—Ä–µ–∑ –∫–æ–º—É)</label>
          <input
            type="text"
            name="amenities"
            value={
              Array.isArray(formData.amenities)
                ? formData.amenities.join(', ')
                : formData.amenities || ''
            }
            onChange={(e) =>
              setFormData((prev) => ({
                ...prev,
                amenities: e.target.value
                  .split(',')
                  .map((a) => a.trim())
                  .filter(Boolean),
              }))
            }
          />
        </div>

        {/* –¶—ñ–Ω–∞ –∑–∞ –¥–æ–±—É */}
        <div className="form-group">
          <label>–¶—ñ–Ω–∞ –∑–∞ –¥–æ–±—É</label>
          <input
            type="number"
            min="1"
            step="1"
            name="dailyRate"
            value={formData.dailyRate ?? ''}
            onChange={handleChange}
          />
        </div>

        {/* URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è */}
        <div className="form-group">
          <label>URL –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è</label>
          <input
            type="text"
            name="image"
            value={formData.image || ''}
            onChange={handleChange}
            placeholder="https://example.com/image.jpg"
          />
        </div>

        <button type="submit" className="btn-primary" disabled={loading}>
          {loading ? '–û–Ω–æ–≤–ª–µ–Ω–Ω—è...' : '–û–Ω–æ–≤–∏—Ç–∏'}
        </button>
      </form>
    </div>
  );
};

export default EditMyAccommodation;